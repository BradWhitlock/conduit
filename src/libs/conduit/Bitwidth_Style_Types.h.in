//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2014-2015, Lawrence Livermore National Security, LLC.
// 
// Produced at the Lawrence Livermore National Laboratory
// 
// LLNL-CODE-666778
// 
// All rights reserved.
// 
// This file is part of Conduit. 
// 
// For details, see: http://scalability-llnl.github.io/conduit/.
// 
// Please also read conduit/LICENSE
// 
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions are met:
// 
// * Redistributions of source code must retain the above copyright notice, 
//   this list of conditions and the disclaimer below.
// 
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the disclaimer (as noted below) in the
//   documentation and/or other materials provided with the distribution.
// 
// * Neither the name of the LLNS/LLNL nor the names of its contributors may
//   be used to endorse or promote products derived from this software without
//   specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,
// LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
// DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
// POSSIBILITY OF SUCH DAMAGE.
// 
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//-----------------------------------------------------------------------------
///
/// file: Bitwidth_Style_Types.hpp
///
//-----------------------------------------------------------------------------

#ifndef CONDUIT_BITWIDTH_STYLE_TYPES_H
#define CONDUIT_BITWIDTH_STYLE_TYPES_H

//-----------------------------------------------------------------------------
// byte len of native types
//-----------------------------------------------------------------------------

#define CONDUIT_SIZEOF_BYTE        1

#cmakedefine CONDUIT_SIZEOF_CHAR        @CONDUIT_SIZEOF_CHAR@
#cmakedefine CONDUIT_SIZEOF_SHORT       @CONDUIT_SIZEOF_SHORT@
#cmakedefine CONDUIT_SIZEOF_INT         @CONDUIT_SIZEOF_INT@
#cmakedefine CONDUIT_SIZEOF_LONG        @CONDUIT_SIZEOF_LONG@
#cmakedefine CONDUIT_SIZEOF_LONG_LONG   @CONDUIT_SIZEOF_LONG_LONG@

#cmakedefine CONDUIT_SIZEOF_FLOAT       @CONDUIT_SIZEOF_FLOAT@
#cmakedefine CONDUIT_SIZEOF_DOUBLE      @CONDUIT_SIZEOF_DOUBLE@
#cmakedefine CONDUIT_SIZEOF_LONG_DOUBLE @CONDUIT_SIZEOF_LONG_DOUBLE@

#cmakedefine CONDUIT_SIZEOF_VOID_P      @CONDUIT_SIZEOF_VOID_P@

// defines that let us know if the compiler supports long long and long double
#cmakedefine CONDUIT_HAS_LONG_LONG      @CONDUIT_HAS_LONG_LONG@
#cmakedefine CONDUIT_HAS_LONG_DOUBLE    @CONDUIT_HAS_LONG_LONG@

//-----------------------------------------------------------------------------
// native types
//-----------------------------------------------------------------------------

typedef signed char         conduit_byte;
typedef unsigned char       conduit_ubyte;
typedef unsigned short      conduit_ushort;
typedef unsigned int        conduit_uint;
typedef unsigned long       conduit_ulong;

#ifdef CONDUIT_HAS_LONG_LONG
typedef unsigned long long  conduit_ulong_long;
#endif

typedef char                conduit_char;
typedef short               conduit_short;
typedef int                 conduit_int;
typedef long                conduit_long;

#ifdef CONDUIT_HAS_LONG_LONG
typedef long long           conduit_long_long;
#endif

typedef float               conduit_float;
typedef double              conduit_double;

#if CONDUIT_SIZEOF_LONG_DOUBLE == CONDUIT_SIZEOF_DOUBLE
        typedef double conduit_long_double;
#else
#ifdef CONDUIT_HAS_LONG_DOUBLE
        typedef long double conduit_long_double;
#endif
#endif

/*-----------------------------------------------------------------------------
/ conduit_datatype_type_id is an Enumeration used to describe the type
/ roles supported by conduit:
-----------------------------------------------------------------------------*/
typedef enum
{
    CONDUIT_EMPTY_T  = @CONDUIT_EMPTY_T@,  // empty (default type)
    CONDUIT_OBJECT_T = @CONDUIT_OBJECT_T@, // object
    CONDUIT_LIST_T   = @CONDUIT_LIST_T@,   // list
    /* signed integer types */
    CONDUIT_INT8_T  = @CONDUIT_INT8_T@,   // int8 and int8_array
    CONDUIT_INT16_T = @CONDUIT_INT16_T@,  // int16 and int16_array
    CONDUIT_INT32_T = @CONDUIT_INT32_T@,  // int32 and int32_array
    CONDUIT_INT64_T = @CONDUIT_INT64_T@,  // int64 and int64_array
    /* unsigned integer types */
    CONDUIT_UINT8_T  = @CONDUIT_UINT8_T@,  // int8 and int8_array
    CONDUIT_UINT16_T = @CONDUIT_UINT16_T@, // uint16 and uint16_array
    CONDUIT_UINT32_T = @CONDUIT_UINT32_T@, // uint32 and uint32_array
    CONDUIT_UINT64_T = @CONDUIT_UINT64_T@, // uint64 and uint64_array
    /* floating point integer types */
    CONDUIT_FLOAT32_T = @CONDUIT_FLOAT32_T@, // float32 and float32_array
    CONDUIT_FLOAT64_T = @CONDUIT_FLOAT64_T@, // float64 and float64_array
    /* string  types */
    CONDUIT_CHAR8_STR_T = @CONDUIT_CHAR8_STR_T@, // char8 string (incore c-string)
} conduit_datatype_type_id;



//-----------------------------------------------------------------------------
// -- bitwidth style signed integer types --
//-----------------------------------------------------------------------------
typedef @CONDUIT_INT8_TYPE@ conduit_int8;
typedef @CONDUIT_INT16_TYPE@ conduit_int16;
typedef @CONDUIT_INT32_TYPE@ conduit_int32;
typedef @CONDUIT_INT64_TYPE@ conduit_int64;

#define CONDUIT_INT8_NATIVE_TYPENAME  "@CONDUIT_INT8_NATIVE_TYPE_NAME@"
#define CONDUIT_INT16_NATIVE_TYPENAME "@CONDUIT_INT16_NATIVE_TYPE_NAME@"
#define CONDUIT_INT32_NATIVE_TYPENAME "@CONDUIT_INT32_NATIVE_TYPE_NAME@"
#define CONDUIT_INT64_NATIVE_TYPENAME "@CONDUIT_INT64_NATIVE_TYPE_NAME@"

//-----------------------------------------------------------------------------
// -- bitwidth style unsigned integer types --
//-----------------------------------------------------------------------------
typedef @CONDUIT_UINT8_TYPE@ conduit_uint8;
typedef @CONDUIT_UINT16_TYPE@ conduit_uint16;
typedef @CONDUIT_UINT32_TYPE@ conduit_uint32;
typedef @CONDUIT_UINT64_TYPE@ conduit_uint64;

#define CONDUIT_UINT8_NATIVE_TYPENAME  "@CONDUIT_UINT8_NATIVE_TYPE_NAME@"
#define CONDUIT_UINT16_NATIVE_TYPENAME "@CONDUIT_UINT16_NATIVE_TYPE_NAME@"
#define CONDUIT_UINT32_NATIVE_TYPENAME "@CONDUIT_UINT32_NATIVE_TYPE_NAME@"
#define CONDUIT_UINT64_NATIVE_TYPENAME "@CONDUIT_UINT64_NATIVE_TYPE_NAME@"


//-----------------------------------------------------------------------------
// -- bitwidth style floating point types
//-----------------------------------------------------------------------------
typedef @CONDUIT_FLOAT32_TYPE@ conduit_float32;
typedef @CONDUIT_FLOAT64_TYPE@ conduit_float64;

#define CONDUIT_FLOAT32_NATIVE_TYPENAME "@CONDUIT_FLOAT32_NATIVE_TYPE_NAME@"
#define CONDUIT_FLOAT64_NATIVE_TYPENAME "@CONDUIT_FLOAT64_NATIVE_TYPE_NAME@"


//-----------------------------------------------------------------------------
// -- c style signed integer type maps --
//-----------------------------------------------------------------------------
#define CONDUIT_NATIVE_CHAR  @CONDUIT_NATIVE_CHAR_TYPE@
#define CONDUIT_NATIVE_SHORT @CONDUIT_NATIVE_SHORT_TYPE@
#define CONDUIT_NATIVE_INT   @CONDUIT_NATIVE_INT_TYPE@
#define CONDUIT_NATIVE_LONG  @CONDUIT_NATIVE_LONG_TYPE@


#define CONDUIT_NATIVE_CHAR_DATATYPE_ID  @CONDUIT_NATIVE_CHAR_TYPE_ID@
#define CONDUIT_NATIVE_SHORT_DATATYPE_ID @CONDUIT_NATIVE_SHORT_TYPE_ID@
#define CONDUIT_NATIVE_INT_DATATYPE_ID   @CONDUIT_NATIVE_INT_TYPE_ID@
#define CONDUIT_NATIVE_LONG_DATATYPE_ID  @CONDUIT_NATIVE_LONG_TYPE_ID@

//-----------------------------------------------------------------------------
// -- c style unsigned integer type maps --
//-----------------------------------------------------------------------------
#define CONDUIT_NATIVE_UNSIGNED_CHAR  @CONDUIT_NATIVE_UNSIGNED_CHAR_TYPE@
#define CONDUIT_NATIVE_UNSIGNED_SHORT @CONDUIT_NATIVE_UNSIGNED_SHORT_TYPE@
#define CONDUIT_NATIVE_UNSIGNED_INT   @CONDUIT_NATIVE_UNSIGNED_INT_TYPE@
#define CONDUIT_NATIVE_UNSIGNED_LONG  @CONDUIT_NATIVE_UNSIGNED_LONG_TYPE@

#define CONDUIT_NATIVE_UNSIGNED_CHAR_DATATYPE_ID  @CONDUIT_NATIVE_UNSIGNED_CHAR_TYPE_ID@
#define CONDUIT_NATIVE_UNSIGNED_SHORT_DATATYPE_ID @CONDUIT_NATIVE_UNSIGNED_SHORT_TYPE_ID@
#define CONDUIT_NATIVE_UNSIGNED_INT_DATATYPE_ID   @CONDUIT_NATIVE_UNSIGNED_INT_TYPE_ID@
#define CONDUIT_NATIVE_UNSIGNED_LONG_DATATYPE_ID  @CONDUIT_NATIVE_UNSIGNED_LONG_TYPE_ID@


//-----------------------------------------------------------------------------
// -- c style floating point type maps --
//-----------------------------------------------------------------------------
#define CONDUIT_NATIVE_FLOAT   @CONDUIT_NATIVE_FLOAT_TYPE@
#define CONDUIT_NATIVE_DOUBLE  @CONDUIT_NATIVE_DOUBLE_TYPE@

#define CONDUIT_NATIVE_FLOAT_DATATYPE_ID  @CONDUIT_NATIVE_FLOAT_TYPE_ID@
#define CONDUIT_NATIVE_DOUBLE_DATATYPE_ID  @CONDUIT_NATIVE_DOUBLE_TYPE_ID@


//-----------------------------------------------------------------------------
/// Index Types
//-----------------------------------------------------------------------------

/// index typedefs
typedef conduit_uint32 conduit_index32_t;
typedef conduit_uint64 conduit_index64_t;

/// use a 64-bit index, unless CONDUIT_INDEX_32 is defined.
#ifdef CONDUIT_INDEX_32
typedef conduit_index32_t conduit_index_t;
#else
typedef conduit_index64_t conduit_index_t;
#endif 

//-----------------------------------------------------------------------------
/// Bit-width type map sanity checks
//-----------------------------------------------------------------------------

//
// check that we were able to resolve all of the bitwidth style types we want
// to support

// signed int
#ifndef CONDUIT_INT8_NATIVE_TYPENAME
#error Bitwidth Style Types: no native type found that maps to int8
#endif

#ifndef CONDUIT_INT16_NATIVE_TYPENAME
#error Bitwidth Style Types: no native type found that maps to int16
#endif

#ifndef CONDUIT_INT32_NATIVE_TYPENAME
#error Bitwidth Style Types: no native type found that maps to int32
#endif

#ifndef CONDUIT_INT64_NATIVE_TYPENAME
#error Bitwidth Style Types: no native type found that maps to int64
#endif

// unsigned ints
#ifndef CONDUIT_UINT8_NATIVE_TYPENAME
#error Bitwidth Style Types: no native type found that maps to uint8
#endif

#ifndef CONDUIT_UINT16_NATIVE_TYPENAME
#error Bitwidth Style Types: no native type found that maps to uint16
#endif

#ifndef CONDUIT_UINT32_NATIVE_TYPENAME
#error Bitwidth Style Types: no native type found that maps to uint32
#endif

#ifndef CONDUIT_UINT64_NATIVE_TYPENAME
#error Bitwidth Style Types: no native type found that maps to uint64
#endif

// floating points numbers
#ifndef CONDUIT_FLOAT32_NATIVE_TYPENAME
#error Bitwidth Style Types: no native type found that maps to float32
#endif

#ifndef CONDUIT_FLOAT64_NATIVE_TYPENAME
#error Bitwidth Style Types: no native type found that maps to float64
#endif

//-----------------------------------------------------------------------------
///End Bit-width type map sanity checks
//-----------------------------------------------------------------------------


#endif

